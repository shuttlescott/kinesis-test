// Code generated by entc, DO NOT EDIT.

package ent

import (
	"creative-production/ent/card"
	"creative-production/ent/player"
	"creative-production/ent/schema"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	cardMixin := schema.Card{}.Mixin()
	cardMixinFields0 := cardMixin[0].Fields()
	_ = cardMixinFields0
	cardFields := schema.Card{}.Fields()
	_ = cardFields
	// cardDescCreateTime is the schema descriptor for create_time field.
	cardDescCreateTime := cardMixinFields0[0].Descriptor()
	// card.DefaultCreateTime holds the default value on creation for the create_time field.
	card.DefaultCreateTime = cardDescCreateTime.Default.(func() time.Time)
	// cardDescUpdateTime is the schema descriptor for update_time field.
	cardDescUpdateTime := cardMixinFields0[1].Descriptor()
	// card.DefaultUpdateTime holds the default value on creation for the update_time field.
	card.DefaultUpdateTime = cardDescUpdateTime.Default.(func() time.Time)
	// card.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	card.UpdateDefaultUpdateTime = cardDescUpdateTime.UpdateDefault.(func() time.Time)
	// cardDescValue is the schema descriptor for value field.
	cardDescValue := cardFields[1].Descriptor()
	// card.ValueValidator is a validator for the "value" field. It is called by the builders before save.
	card.ValueValidator = func() func(int) error {
		validators := cardDescValue.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(value int) error {
			for _, fn := range fns {
				if err := fn(value); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	playerMixin := schema.Player{}.Mixin()
	playerMixinFields0 := playerMixin[0].Fields()
	_ = playerMixinFields0
	playerFields := schema.Player{}.Fields()
	_ = playerFields
	// playerDescCreateTime is the schema descriptor for create_time field.
	playerDescCreateTime := playerMixinFields0[0].Descriptor()
	// player.DefaultCreateTime holds the default value on creation for the create_time field.
	player.DefaultCreateTime = playerDescCreateTime.Default.(func() time.Time)
	// playerDescUpdateTime is the schema descriptor for update_time field.
	playerDescUpdateTime := playerMixinFields0[1].Descriptor()
	// player.DefaultUpdateTime holds the default value on creation for the update_time field.
	player.DefaultUpdateTime = playerDescUpdateTime.Default.(func() time.Time)
	// player.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	player.UpdateDefaultUpdateTime = playerDescUpdateTime.UpdateDefault.(func() time.Time)
	// playerDescAge is the schema descriptor for age field.
	playerDescAge := playerFields[0].Descriptor()
	// player.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	player.AgeValidator = playerDescAge.Validators[0].(func(int) error)
	// playerDescName is the schema descriptor for name field.
	playerDescName := playerFields[1].Descriptor()
	// player.DefaultName holds the default value on creation for the name field.
	player.DefaultName = playerDescName.Default.(string)
	// playerDescScore is the schema descriptor for score field.
	playerDescScore := playerFields[2].Descriptor()
	// player.DefaultScore holds the default value on creation for the score field.
	player.DefaultScore = playerDescScore.Default.(int)
	// player.ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	player.ScoreValidator = playerDescScore.Validators[0].(func(int) error)
}
